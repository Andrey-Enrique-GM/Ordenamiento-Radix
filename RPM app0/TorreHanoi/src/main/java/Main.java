
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

// @author Andrey

public class Main extends javax.swing.JFrame {
    
    int ContNumMov = 0;
    
    Pila PilaTorreA;
    Pila PilaTorreB;
    Pila PilaTorreC;
    
    DefaultTableModel ModeloTablaTorreA, ModeloTablaTorreB, ModeloTablaTorreC;
    
    int Objetivo = 0;
    
    double NumMinMov = 0;
    
   // boolean Stop = false;
    
    
    
    
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Main.class.getName());

    /**
     * Creates new form Main
     */
    public Main() 
    {

        initComponents();
        
        ModeloTablaTorreA = (DefaultTableModel) tblA.getModel();
        ModeloTablaTorreA.setRowCount(10);
        
        ModeloTablaTorreB = (DefaultTableModel) tblB.getModel();
        ModeloTablaTorreB.setRowCount(10);
        
        ModeloTablaTorreC = (DefaultTableModel) tblC.getModel();
        ModeloTablaTorreC.setRowCount(10);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        tblA.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        tblB.getColumnModel().getColumn(0).setCellRenderer(renderB);
        
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        tblC.getColumnModel().getColumn(0).setCellRenderer(renderC);
        
    }
    
    
    
    private void Limpiar()
    {
        
        ContNumMov = 0;
        NumMinMov = 0;
        
        cbNumDiscos.setSelectedItem(String.valueOf(Objetivo));
        
    }
    
    
    
    private void PresentarCantMov()
    {
        
        ContNumMov ++;
        lblNumMov.setText(String.valueOf(ContNumMov));
        
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblA = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblB = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblC = new javax.swing.JTable();
        btnA_B = new javax.swing.JButton();
        btnA_C = new javax.swing.JButton();
        btnB_A = new javax.swing.JButton();
        btnB_C = new javax.swing.JButton();
        btnC_A = new javax.swing.JButton();
        btnC_B = new javax.swing.JButton();
        cbNumDiscos = new javax.swing.JComboBox<>();
        lblMinMov = new javax.swing.JLabel();
        lblNumMov = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        btbReiniciar = new javax.swing.JButton();
        btnResolver = new javax.swing.JButton();

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 153));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Numero minimo de movimientos:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        tblA.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        tblA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblA.setAutoscrolls(false);
        tblA.setFocusable(false);
        tblA.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblA);
        if (tblA.getColumnModel().getColumnCount() > 0) {
            tblA.getColumnModel().getColumn(0).setResizable(false);
        }

        tblB.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        tblB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblB.setAutoscrolls(false);
        tblB.setFocusable(false);
        tblB.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(tblB);
        if (tblB.getColumnModel().getColumnCount() > 0) {
            tblB.getColumnModel().getColumn(0).setResizable(false);
        }

        tblC.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        tblC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblC.setAutoscrolls(false);
        tblC.setFocusable(false);
        tblC.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(tblC);
        if (tblC.getColumnModel().getColumnCount() > 0) {
            tblC.getColumnModel().getColumn(0).setResizable(false);
        }

        btnA_B.setBackground(new java.awt.Color(0, 102, 204));
        btnA_B.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnA_B.setForeground(new java.awt.Color(255, 255, 255));
        btnA_B.setText("B");
        btnA_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnA_BActionPerformed(evt);
            }
        });

        btnA_C.setBackground(new java.awt.Color(0, 102, 204));
        btnA_C.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnA_C.setForeground(new java.awt.Color(255, 255, 255));
        btnA_C.setText("C");
        btnA_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnA_CActionPerformed(evt);
            }
        });

        btnB_A.setBackground(new java.awt.Color(0, 102, 204));
        btnB_A.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnB_A.setForeground(new java.awt.Color(255, 255, 255));
        btnB_A.setText("A");
        btnB_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnB_AActionPerformed(evt);
            }
        });

        btnB_C.setBackground(new java.awt.Color(0, 102, 204));
        btnB_C.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnB_C.setForeground(new java.awt.Color(255, 255, 255));
        btnB_C.setText("C");
        btnB_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnB_CActionPerformed(evt);
            }
        });

        btnC_A.setBackground(new java.awt.Color(0, 102, 204));
        btnC_A.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnC_A.setForeground(new java.awt.Color(255, 255, 255));
        btnC_A.setText("A");
        btnC_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC_AActionPerformed(evt);
            }
        });

        btnC_B.setBackground(new java.awt.Color(0, 102, 204));
        btnC_B.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        btnC_B.setForeground(new java.awt.Color(255, 255, 255));
        btnC_B.setText("B");
        btnC_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC_BActionPerformed(evt);
            }
        });

        cbNumDiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));

        lblMinMov.setFont(new java.awt.Font("Showcard Gothic", 0, 14)); // NOI18N
        lblMinMov.setForeground(new java.awt.Color(102, 0, 102));
        lblMinMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinMov.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblNumMov.setFont(new java.awt.Font("Showcard Gothic", 0, 14)); // NOI18N
        lblNumMov.setForeground(new java.awt.Color(102, 0, 102));
        lblNumMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumMov.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 153));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Numero de Discos:");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Numero minimo de movimientos:");

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 153));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Numero de movimientos:");

        btnIniciar.setBackground(new java.awt.Color(0, 51, 153));
        btnIniciar.setFont(new java.awt.Font("Showcard Gothic", 0, 14)); // NOI18N
        btnIniciar.setForeground(new java.awt.Color(204, 255, 255));
        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btbReiniciar.setBackground(new java.awt.Color(0, 51, 153));
        btbReiniciar.setFont(new java.awt.Font("Showcard Gothic", 0, 14)); // NOI18N
        btbReiniciar.setForeground(new java.awt.Color(204, 255, 255));
        btbReiniciar.setText("Reiniciar");
        btbReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbReiniciarActionPerformed(evt);
            }
        });

        btnResolver.setBackground(new java.awt.Color(0, 51, 153));
        btnResolver.setFont(new java.awt.Font("Showcard Gothic", 0, 14)); // NOI18N
        btnResolver.setForeground(new java.awt.Color(204, 255, 255));
        btnResolver.setText("Resolver");
        btnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnB_A, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnB_C, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnC_A, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnC_B, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(cbNumDiscos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btbReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnA_B, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnA_C, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMinMov, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(10, 10, 10))
                        .addComponent(lblNumMov, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnA_C)
                        .addComponent(btnA_B))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnB_C)
                        .addComponent(btnB_A))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnC_B)
                        .addComponent(btnC_A)))
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMinMov, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNumMov, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btbReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void MoverDeA_B()
    {
        
        try{
            
            if (PilaTorreA.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreA.Peek());
                
                if (PilaTorreB.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreB.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreA.Pop();
                PilaTorreB.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreB();
                PresentarCantMov();
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnA_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnA_BActionPerformed
        
        MoverDeA_B();
        
    }//GEN-LAST:event_btnA_BActionPerformed

    
    
    private void MoverDeA_C()
    {
        
        try{
            
            if (PilaTorreA.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreA.Peek());
                
                if (PilaTorreC.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreC.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreA.Pop();
                PilaTorreC.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreC();
                PresentarCantMov();
                
                if (PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov)
                {
                    JOptionPane.showMessageDialog(null, "Felicidades, haz alcanzado el objetivo de minimo de movimientos!!!\n\nIntenta con otro nivel de dificultad :D",
                                                                                "Felicidades Shinji", JOptionPane.WARNING_MESSAGE);
                } else if (PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov)
                {
                    JOptionPane.showMessageDialog(null, "Felicidades, lo haz resuelto!\n\nIntenta superar el objetivo minimo de movimientos :)",
                                                                                "Felicidades Shinji", JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnA_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnA_CActionPerformed
        
        MoverDeA_C();
        
    }//GEN-LAST:event_btnA_CActionPerformed

    
    
    private void MoverDeB_A()
    {
        
        try{
            
            if (PilaTorreB.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreB.Peek());
                
                if (PilaTorreA.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreA.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreB.Pop();
                PilaTorreA.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreB();
                PresentarCantMov();
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnB_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnB_AActionPerformed
        
        MoverDeB_A();
        
    }//GEN-LAST:event_btnB_AActionPerformed

    
    
    private void MoverDeB_C()
    {
        
        try{
            
            if (PilaTorreB.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreB.Peek());
                
                if (PilaTorreC.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreC.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreB.Pop();
                PilaTorreC.Push(Plataforma);
                
                PresentarTorreB();
                PresentarTorreC();
                PresentarCantMov();
                
                if (PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov)
                {
                    JOptionPane.showMessageDialog(null, "Felicidades, haz alcanzado el objetivo de minimo de movimientos!!!\n\nIntenta con otro nivel de dificultad :D",
                                                                                "Felicidades Shinji", JOptionPane.WARNING_MESSAGE);
                } else if (PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov)
                {
                    JOptionPane.showMessageDialog(null, "Felicidades, lo haz resuelto!\n\nIntenta superar el objetivo minimo de movimientos :)",
                                                                                "Felicidades Shinji", JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnB_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnB_CActionPerformed
        
        MoverDeB_C();
        
    }//GEN-LAST:event_btnB_CActionPerformed

    
    
    private void MoverDeC_A()
    {
        
        try{
            
            if (PilaTorreC.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreC.Peek());
                
                if (PilaTorreA.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreA.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreC.Pop();
                PilaTorreA.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreC();
                PresentarCantMov();
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnC_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC_AActionPerformed
        
        MoverDeC_A();
        
    }//GEN-LAST:event_btnC_AActionPerformed

    
    
    private void MoverDeC_B()
    {
        
        try{
            
            if (PilaTorreC.getContNodo() > 0)
            {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(PilaTorreC.Peek());
                
                if (PilaTorreB.getContNodo() > 0)
                {
                    
                    if (Plataforma.getDato().compareTo(PilaTorreB.Peek()) > 0)
                    {
                        return;
                    }
                    
                }
                
                PilaTorreC.Pop();
                PilaTorreB.Push(Plataforma);
                
                PresentarTorreB();
                PresentarTorreC();
                PresentarCantMov();
                
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    private void btnC_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC_BActionPerformed
        
        MoverDeC_B();
        
    }//GEN-LAST:event_btnC_BActionPerformed

    
    
    
    private void Reiniciar()
    {
        
        try{
            
            if (!lblMinMov.getText().equals("")){
                Limpiar();
                Iniciar();
            }
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }
        
    }
    
    
    
    private void Iniciar()
    {
        
        try{
            
            PilaTorreA = new Pila();
            PilaTorreB = new Pila();
            PilaTorreC = new Pila();
        
            Objetivo = Integer.parseInt(cbNumDiscos.getSelectedItem().toString());
        
            NumMinMov = Math.pow(2, Objetivo) - 1;
        
            lblNumMov.setText(String.valueOf(ContNumMov));
            lblMinMov.setText(String.valueOf(String.format("%.0f", NumMinMov)));
        
            for (int x = Objetivo ;  x >= 1 ; x--)
            {
            
                Nodo Plataforma = new Nodo();
            
                String Disco = "";
            
                for (int y = x ; y > 0 ; y--)
                {
                
                    Disco += "#";
                
                }
            
                Plataforma.setDato(Disco);
            
                PilaTorreA.Push(Plataforma);
            
            }
        
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            
        } catch (Exception E) {
            System.out.println("Error: " + E.getMessage());
        }

    }
    
    
    
    private void PresentarTorreA()
    {
        
        ((DefaultTableModel)tblA.getModel()).setRowCount(0);
        
        ModeloTablaTorreA.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreA.getContNodo());
        
        if (PilaTorreA.getContNodo() > 0)
        {
            for (K = PilaTorreA.getCabeza() ; K.getAbajo() != null ; K = K.getAbajo())
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
                RowDisco ++;
            }
            if (K.getAbajo() == null)
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
            }
        }
        
        tblA.setModel(ModeloTablaTorreA);
        ModeloTablaTorreA.setRowCount(10);
        
    }
    
    
    
    private void PresentarTorreB()
    {
        
        ((DefaultTableModel)tblB.getModel()).setRowCount(0);
        
        ModeloTablaTorreB.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreB.getContNodo());
        
        if (PilaTorreB.getContNodo() > 0)
        {
            for (K = PilaTorreB.getCabeza() ; K.getAbajo() != null ; K = K.getAbajo())
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
                RowDisco ++;
            }
            if (K.getAbajo() == null)
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
            }
        }
        
        tblB.setModel(ModeloTablaTorreB);
        ModeloTablaTorreB.setRowCount(10);
        
    }
    
    
    
    private void PresentarTorreC()
    {
        
        ((DefaultTableModel)tblC.getModel()).setRowCount(0);
        
        ModeloTablaTorreC.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreC.getContNodo());
        
        if (PilaTorreC.getContNodo() > 0)
        {
            for (K = PilaTorreC.getCabeza() ; K.getAbajo() != null ; K = K.getAbajo())
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
                RowDisco ++;
            }
            if (K.getAbajo() == null)
            {
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
            }
        }
        
        tblC.setModel(ModeloTablaTorreC);
        ModeloTablaTorreC.setRowCount(10);
        
    }
    
    
    
    boolean Stop = false;
    
    private void MoverPlataforma (Pila Origen, Pila Destino)
    {
        
        if (Stop == false)
        {
            
            Nodo Plataforma = new Nodo();
            
            Plataforma.setDato(Origen.Peek());
            
            Origen.Pop();
            
            Destino.Push(Plataforma);
            
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            PresentarCantMov();
            
            JOptionPane pane = new JOptionPane("Paso # " + lblNumMov.getText() + "\n\nQuieres continuar??",
                                                        JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
            
            JDialog dialog = pane.createDialog("Numero de pasos");
            
            dialog.setLocation (600, 400);
            
            dialog.setVisible(true);
            
            int opt = (int) pane.getValue();
            
            if (opt == JOptionPane.NO_OPTION)
            {
                Stop = true;
            }
            
        }
        
    }
    
    
    
    private void ResolverHanoiRecursivo(int n, Pila Origen, Pila Auxiliar, Pila Destino)
    {
        
        if (n == 1)
        {
            MoverPlataforma(Origen, Destino);
        } else {
            ResolverHanoiRecursivo(n - 1, Origen, Destino, Auxiliar);
            MoverPlataforma(Origen, Destino);
            ResolverHanoiRecursivo(n - 1, Auxiliar, Origen, Destino);
        }
        
    }
    
    
    
    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed

        ContNumMov = 0;
        
        Iniciar();
        
    }//GEN-LAST:event_btnIniciarActionPerformed

    
    
    private void btbReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbReiniciarActionPerformed
       
        Reiniciar();
        
    }//GEN-LAST:event_btbReiniciarActionPerformed

    
    
    private void btnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResolverActionPerformed
        
        if (!lblMinMov.getText().equals("") && PilaTorreC.getContNodo() != Objetivo)
        {
            
            Reiniciar();
            Stop = false;
            
            ResolverHanoiRecursivo(Objetivo, PilaTorreA, PilaTorreB, PilaTorreC);
            
        }
        
    }//GEN-LAST:event_btnResolverActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btbReiniciar;
    private javax.swing.JButton btnA_B;
    private javax.swing.JButton btnA_C;
    private javax.swing.JButton btnB_A;
    private javax.swing.JButton btnB_C;
    private javax.swing.JButton btnC_A;
    private javax.swing.JButton btnC_B;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnResolver;
    private javax.swing.JComboBox<String> cbNumDiscos;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMinMov;
    private javax.swing.JLabel lblNumMov;
    private javax.swing.JTable tblA;
    private javax.swing.JTable tblB;
    private javax.swing.JTable tblC;
    // End of variables declaration//GEN-END:variables
}
